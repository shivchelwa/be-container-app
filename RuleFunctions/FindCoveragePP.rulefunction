/**
 * @description 
 */
void rulefunction RuleFunctions.FindCoveragePP {
	attribute {
		validity = ACTION;
	}
	scope {
			Events.FindCoverageRequest findCoverageReq;
	}
	body {
		System.debugOut(Engine.ruleFunctionName());
		System.debugOut("Request Payload " + findCoverageReq@payload);
		Events.LogEvent logEvent = Events.LogEvent.LogEvent(null, null, "Received DetermineCoverage, Event Payload: " + findCoverageReq@payload);
		Event.Ext.sendEventImmediate(logEvent);
		
		//Generate UUID
		String UUID = Functions.Generate.UUID();;
		findCoverageReq.requestId = UUID;

		//Create a EligibilityRequest Concept from JSON payload
		Concepts.EligibilityRequest eligibilityRequest = Instance.createInstanceFromJSON("/Concepts/EligibilityRequest", findCoverageReq@payload);
		eligibilityRequest.requestId = UUID;
		System.debugOut("EligibilityRequest JSON: " + Instance.serializeToJSON(eligibilityRequest, true, ""));

		//Create response with defaults
		Concepts.EligibilityResponse eligibilityResponse = Instance.newInstance("/Concepts/EligibilityResponse", null);
		eligibilityResponse.ID = UUID;
		eligibilityResponse.created = eligibilityRequest.created;
		eligibilityResponse.resourceType = eligibilityRequest.resourceType;
		eligibilityResponse.status = eligibilityRequest.status;
		eligibilityResponse.coverage = Instance.newInstance("/Concepts/ReferenceCoverageRes", null);
		eligibilityResponse.coverage.reference = eligibilityRequest.coverage.reference;
		eligibilityResponse.insurer = Instance.newInstance("/Concepts/ReferenceInsurerRes", null);
		eligibilityResponse.insurer.reference = eligibilityRequest.insurer.reference;
		eligibilityResponse.request = Instance.newInstance("/Concepts/ReferenceRequestRes", null);
		eligibilityResponse.request.reference = String.concat(Scorecards.SystemConstants.EligibilityRequestURL, eligibilityRequest.ID);

		try {						
			//Get Reference Coverage from Cache
			long httpRequestTimeout = Scorecards.SystemConstants.CacheRequestTimeout;
			String getCacheURL = Scorecards.SystemConstants.CacheRequestURL;
			String httpURL = String.concat(getCacheURL, eligibilityRequest.coverage.reference);		
			System.debugOut("HTTPURL: " + httpURL);
			Object httpConnection = HTTP.ConnectionInfo.createHTTPConnectionInfo(true);
			Events.GetCoverageRequest httpReq = Events.GetCoverageRequest.GetCoverageRequest(null, null);
			Events.GetCoverageHttpRes httpRes = HTTP.sendRequest(httpURL, httpReq, "/Events/GetCoverageHttpRes", httpRequestTimeout, httpConnection);
			
			System.debugOut("HTTP Response: " + httpRes@payload);
			Object jsonContent = JSON.parseJSON(httpRes@payload);
			Object statusCodeNode = JSON.getNode(jsonContent, "statusCode");
			Object bodyNode = JSON.getNode(jsonContent, "body");
			//Throw exception if coverage not found
			if(statusCodeNode == null ||  JSON.getTextValue(statusCodeNode) != "200"
				|| Functions.Java.getSimpleClassName(bodyNode) == "NullNode" || JSON.getTextValue(statusCodeNode) == "") {
				//System.debugOut("getCache request returned null: " + jsonContent);
				throw Exception.newException("getCache request returned null: " + jsonContent + " for coverageId: " + eligibilityRequest.coverage.reference, "", null);
			}
			
			Concepts.Coverage cacheCoverage = Instance.createInstanceFromJSON("/Concepts/Coverage", JSON.getTextValue(bodyNode));
			System.debugOut("Cached Coverage JSON: " + Instance.serializeToJSON(cacheCoverage, true, ""));
			
		} catch(Exception ex) {
			
			System.debugOut(Engine.ruleFunctionName() + " - Error Occured: " + ex@message);

			String system = Scorecards.SystemConstants.NoCoverageSystem;
			String code = Scorecards.SystemConstants.NoCoverageCode;
			eligibilityResponse.inforce = false;
			eligibilityResponse.disposition = "coverage not found";
			eligibilityResponse.error[eligibilityResponse.error@length] = RuleFunctions.newSystemError(system, code);
			
			Events.LogException logException = Events.LogException.LogException(null, null, Engine.ruleFunctionName() + " - Error Occured: " + ex@message);
			Event.Ext.sendEventImmediate(logException);
		}
	}
}