/**
 * @description 
 */
void rulefunction RuleFunctions.FindCoveragePP {
	attribute {
		validity = ACTION;
	}
	scope {
			Events.FindCoverageRequest findCoverageReq;
	}
	body {
		System.debugOut("Received request to find coverage for " + findCoverageReq@payload);
		Events.LogEvent logEvent = Events.LogEvent.LogEvent(null, null, "Received request to find coverage for patient");
		Event.Ext.sendEventImmediate(logEvent);

		Concepts.EligibilityRequest eligibilityRequest = Instance.createInstanceFromJSON("/Concepts/EligibilityRequest", findCoverageReq@payload);
		System.debugOut("EligibilityRequest JSON: " + Instance.serializeToJSON(eligibilityRequest, true, ""));

		Concepts.EligibilityResponse eligibilityResponse = Instance.newInstance("/Concepts/EligibilityResponse", null);
		eligibilityResponse.ID = Functions.UUID();
		eligibilityResponse.created = eligibilityRequest.created;
		eligibilityResponse.resourceType = eligibilityRequest.resourceType;
		eligibilityResponse.status = eligibilityRequest.status;
		eligibilityResponse.coverage = Instance.newInstance("/Concepts/ReferenceCoverageRes", null);
		eligibilityResponse.coverage.reference = eligibilityRequest.coverage.reference;
		eligibilityResponse.insurer = Instance.newInstance("/Concepts/ReferenceInsurerRes", null);
		eligibilityResponse.insurer.reference = eligibilityRequest.insurer.reference;
		eligibilityResponse.request = Instance.newInstance("/Concepts/ReferenceRequestRes", null);
		eligibilityResponse.request.reference = String.concat(System.getGlobalVariableAsString("%%Application/RequestURL%%", ""), eligibilityRequest.ID);

		String disposition = "";
		try {
			//Create a EligibilityRequest Concept from JSON payload
						
			//Get Reference Coverage from Cache
			long httpRequestTimeout = System.getGlobalVariableAsLong("%%Tuning/HttpRequestTimeout%%", 1000);
			String getCacheURL = System.getGlobalVariableAsString("%%ExternalAPI/ElastiCache/GetCoverageAPI%%", "https://trw47ga2z5.execute-api.us-east-1.amazonaws.com/prod?accNum=");
			String httpURL = String.concat(getCacheURL, eligibilityRequest.coverage.reference);			
			System.debugOut("HTTPURL: " + httpURL);
			Object httpConnection = HTTP.ConnectionInfo.createHTTPConnectionInfo(true);
			Events.GetCoverageRequest httpReq = Events.GetCoverageRequest.GetCoverageRequest(null, null);
			Events.GetCoverageHttpRes httpRes = HTTP.sendRequest(httpURL, httpReq, "/Events/GetCoverageHttpRes", httpRequestTimeout, httpConnection);
			
			System.debugOut("HTTP Response: " + httpRes@payload);
			Object jsonContent = JSON.parseJSON(httpRes@payload);
			System.debugOut("HTTP Response jsonContent: " + jsonContent);
			Object statusCodeNode = JSON.getNode(jsonContent, "statusCode");
			System.debugOut("statusCode: " + statusCodeNode);
			Object bodyNode = JSON.getNode(jsonContent, "body");
			System.debugOut("body: " + bodyNode);
			System.debugOut("body: " + bodyNode);
			if(statusCodeNode == null ||  JSON.getTextValue(statusCodeNode) != "200"
				|| bodyNode == "null" || JSON.getTextValue(statusCodeNode) == "") {
				System.debugOut("Cache returned null");
				throw Exception.newException("Cache returned null for coverageId: " + eligibilityRequest.coverage.reference, "", null);
			}
			
			Concepts.Coverage cacheCoverage = Instance.createInstanceFromJSON("/Concepts/Coverage", JSON.getTextValue(bodyNode));
			System.debugOut("CacheCoverage JSON: " + Instance.serializeToJSON(cacheCoverage, true, ""));
			
		} catch(Exception ex) {
			
			System.debugOut(Engine.ruleFunctionName() + " - Error Occured: " + ex@message);

			Events.LogException logException = Events.LogException.LogException(null, null, Engine.ruleFunctionName() + " - Error Occured: " + ex@message);
			Event.Ext.sendEventImmediate(logException);
			
			String system = Scorecards.SystemConstants.NoCoverageSystem;
			String code = Scorecards.SystemConstants.NoCoverageCode;
			
			eligibilityResponse.error[eligibilityResponse.error@length] = RuleFunctions.InstantiateSystemError(system, code);
			
		} finally {
		
			eligibilityResponse.inforce = (String.equals(disposition, ""));
			eligibilityResponse.disposition = disposition;
			
			String responsePayload = Instance.serializeToJSON(eligibilityResponse, true, "");
			Events.FindCoverageResponse findCoverageRes = Events.FindCoverageResponse.FindCoverageResponse(null, responsePayload);
			Event.replyEvent(findCoverageReq, findCoverageRes);
		}
	}
}